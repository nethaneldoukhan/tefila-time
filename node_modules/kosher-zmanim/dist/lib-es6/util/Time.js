/**
 * A class that represents a numeric time. Times that represent a time of day are stored as {@link java.util.Date}s in
 * this API. The time class is used to represent numeric time such as the time in hours, minutes, seconds and
 * milliseconds of a {@link net.sourceforge.zmanim.AstronomicalCalendar#getTemporalHour() temporal hour}.
 *
 * @author &copy; Eliyahu Hershfeld 2004 - 2011
 * @version 0.9.0
 */
export class Time {
    constructor(hoursOrMillis, minutes, seconds = 0, milliseconds = 0) {
        this.hours = 0;
        this.minutes = 0;
        this.seconds = 0;
        this.milliseconds = 0;
        this.negative = false;
        if (minutes) {
            this.hours = hoursOrMillis;
            this.minutes = minutes;
            this.seconds = seconds;
            this.milliseconds = milliseconds;
        }
        else {
            let adjustedMillis = hoursOrMillis;
            if (adjustedMillis < 0) {
                this.negative = true;
                adjustedMillis = Math.abs(adjustedMillis);
            }
            this.hours = Math.trunc(adjustedMillis / Time.HOUR_MILLIS);
            adjustedMillis = adjustedMillis - this.hours * Time.HOUR_MILLIS;
            this.minutes = Math.trunc(adjustedMillis / Time.MINUTE_MILLIS);
            adjustedMillis = adjustedMillis - this.minutes * Time.MINUTE_MILLIS;
            this.seconds = Math.trunc(adjustedMillis / Time.SECOND_MILLIS);
            adjustedMillis = adjustedMillis - this.seconds * Time.SECOND_MILLIS;
            this.milliseconds = adjustedMillis;
        }
    }
    /*
        public Time(millis: number) {
            this((int) millis);
        }
  
        public Time(millis: number) {
            adjustedMillis: number = millis;
            if (adjustedMillis < 0) {
                this.isNegative = true;
                adjustedMillis = Math.abs(adjustedMillis);
            }
            this.hours = adjustedMillis / HOUR_MILLIS;
            adjustedMillis = adjustedMillis - this.hours * HOUR_MILLIS;
  
            this.minutes = adjustedMillis / MINUTE_MILLIS;
            adjustedMillis = adjustedMillis - this.minutes * MINUTE_MILLIS;
  
            this.seconds = adjustedMillis / SECOND_MILLIS;
            adjustedMillis = adjustedMillis - this.seconds * SECOND_MILLIS;
  
            this.milliseconds = adjustedMillis;
        }
    */
    isNegative() {
        return this.negative;
    }
    setIsNegative(isNegative) {
        this.negative = isNegative;
    }
    /**
     * @return Returns the hour.
     */
    getHours() {
        return this.hours;
    }
    /**
     * @param hours
     *            The hours to set.
     */
    setHours(hours) {
        this.hours = hours;
    }
    /**
     * @return Returns the minutes.
     */
    getMinutes() {
        return this.minutes;
    }
    /**
     * @param minutes
     *            The minutes to set.
     */
    setMinutes(minutes) {
        this.minutes = minutes;
    }
    /**
     * @return Returns the seconds.
     */
    getSeconds() {
        return this.seconds;
    }
    /**
     * @param seconds
     *            The seconds to set.
     */
    setSeconds(seconds) {
        this.seconds = seconds;
    }
    /**
     * @return Returns the milliseconds.
     */
    getMilliseconds() {
        return this.milliseconds;
    }
    /**
     * @param milliseconds
     *            The milliseconds to set.
     */
    setMilliseconds(milliseconds) {
        this.milliseconds = milliseconds;
    }
    getTime() {
        return this.hours * Time.HOUR_MILLIS + this.minutes * Time.MINUTE_MILLIS + this.seconds * Time.SECOND_MILLIS +
            this.milliseconds;
    }
    /**
     * @deprecated This depends on a circular dependency. Use <pre>new ZmanimFormatter(TimeZone.getTimeZone("UTC")).format(time)</pre> instead.
     */
    // eslint-disable-next-line class-methods-use-this
    toString() {
        throw new Error('This method is deprecated, due to the fact that it depends on a circular dependency. ' +
            'Use `new ZmanimFormatter(TimeZone.getTimeZone(\'UTC\')).format(time)` instead');
    }
}
Time.SECOND_MILLIS = 1000;
Time.MINUTE_MILLIS = Time.SECOND_MILLIS * 60;
Time.HOUR_MILLIS = Time.MINUTE_MILLIS * 60;
//# sourceMappingURL=Time.js.map