/**
 * A class that represents a numeric time. Times that represent a time of day are stored as {@link java.util.Date}s in
 * this API. The time class is used to represent numeric time such as the time in hours, minutes, seconds and
 * milliseconds of a {@link net.sourceforge.zmanim.AstronomicalCalendar#getTemporalHour() temporal hour}.
 *
 * @author &copy; Eliyahu Hershfeld 2004 - 2011
 * @version 0.9.0
 */
export declare class Time {
    private static readonly SECOND_MILLIS;
    private static readonly MINUTE_MILLIS;
    private static readonly HOUR_MILLIS;
    private hours;
    private minutes;
    private seconds;
    private milliseconds;
    private negative;
    constructor(hoursOrMillis: number, minutes?: number, seconds?: number, milliseconds?: number);
    isNegative(): boolean;
    setIsNegative(isNegative: boolean): void;
    /**
     * @return Returns the hour.
     */
    getHours(): number;
    /**
     * @param hours
     *            The hours to set.
     */
    setHours(hours: number): void;
    /**
     * @return Returns the minutes.
     */
    getMinutes(): number;
    /**
     * @param minutes
     *            The minutes to set.
     */
    setMinutes(minutes: number): void;
    /**
     * @return Returns the seconds.
     */
    getSeconds(): number;
    /**
     * @param seconds
     *            The seconds to set.
     */
    setSeconds(seconds: number): void;
    /**
     * @return Returns the milliseconds.
     */
    getMilliseconds(): number;
    /**
     * @param milliseconds
     *            The milliseconds to set.
     */
    setMilliseconds(milliseconds: number): void;
    getTime(): number;
    /**
     * @deprecated This depends on a circular dependency. Use <pre>new ZmanimFormatter(TimeZone.getTimeZone("UTC")).format(time)</pre> instead.
     */
    toString(): string;
}
